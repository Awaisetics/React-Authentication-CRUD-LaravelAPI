{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from 'axios';\nimport swal from 'sweetalert';\n\nfunction Login() {\n  _s();\n\n  const navigate = useNavigate();\n  const [credentials, setCredentials] = useState({\n    email: \"\",\n    password: \"\",\n    error_list: []\n  });\n\n  const handleInput = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setCredentials({ ...credentials,\n      [name]: value\n    });\n  };\n\n  const authenticate = e => {\n    e.preventDefault();\n    const data = {\n      email: credentials.email,\n      password: credentials.password\n    };\n    axios.post(`http://127.0.0.1:8000/api/login`, data, {\n      headers: {\n        'Accept': 'application/json',\n        'credentials': 'include'\n      }\n    }).then(res => {\n      if (res.data.status === 200) {\n        const Auth_token = res.data.message;\n        localStorage.setItem('token', Auth_token);\n        console.log(res.data.message);\n        swal({\n          title: \"Success!\",\n          text: \"Logged In Successfully\",\n          icon: \"success\",\n          timer: 2000,\n          button: false\n        });\n        setCredentials({\n          email: '',\n          password: '',\n          error_list: []\n        });\n        navigate('/students');\n      } else if (res.data.status === 422) {\n        setCredentials({ ...credentials,\n          error_list: res.data.validate_err\n        });\n      } else if (res.data.status === 401) {\n        swal(\"Invalid Credentials\", \"Email and Password do not Match\", \"error\");\n      }\n    });\n  };\n\n  if (!localStorage.getItem('token')) {}\n}\n\n_s(Login, \"q8BEQn8fSB15mkkLsk/zyTF/wtM=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/xampp/htdocs/Laravel - React - CRUD/reactjs/src/Login.js"],"names":["React","useState","useNavigate","axios","swal","Login","navigate","credentials","setCredentials","email","password","error_list","handleInput","e","name","value","target","authenticate","preventDefault","data","post","headers","then","res","status","Auth_token","message","localStorage","setItem","console","log","title","text","icon","timer","button","validate_err","getItem"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,YAAjB;;AAEA,SAASC,KAAT,GAAiB;AAAA;;AAEb,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B;AAEA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC;AAC3CQ,IAAAA,KAAK,EAAE,EADoC;AAE3CC,IAAAA,QAAQ,EAAE,EAFiC;AAG3CC,IAAAA,UAAU,EAAE;AAH+B,GAAD,CAA9C;;AAMA,QAAMC,WAAW,GAAIC,CAAD,IAAO;AACvB,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,CAAC,CAACG,MAA1B;AACAR,IAAAA,cAAc,CAAC,EAAE,GAAGD,WAAL;AAAkB,OAACO,IAAD,GAAQC;AAA1B,KAAD,CAAd;AACH,GAHD;;AAKG,QAAME,YAAY,GAAIJ,CAAD,IAAO;AAC3BA,IAAAA,CAAC,CAACK,cAAF;AACA,UAAMC,IAAI,GAAG;AACTV,MAAAA,KAAK,EAAEF,WAAW,CAACE,KADV;AAETC,MAAAA,QAAQ,EAAEH,WAAW,CAACG;AAFb,KAAb;AAKAP,IAAAA,KAAK,CAACiB,IAAN,CAAY,iCAAZ,EAA8CD,IAA9C,EAAqD;AAC/CE,MAAAA,OAAO,EAAE;AACP,kBAAS,kBADF;AAEP,uBAAgB;AAFT;AADsC,KAArD,EAKGC,IALH,CAKQC,GAAG,IAAE;AACT,UAAIA,GAAG,CAACJ,IAAJ,CAASK,MAAT,KAAoB,GAAxB,EAA6B;AACzB,cAAMC,UAAU,GAACF,GAAG,CAACJ,IAAJ,CAASO,OAA1B;AACAC,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA6BH,UAA7B;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAYP,GAAG,CAACJ,IAAJ,CAASO,OAArB;AACAtB,QAAAA,IAAI,CAAC;AACD2B,UAAAA,KAAK,EAAE,UADN;AAEDC,UAAAA,IAAI,EAAE,wBAFL;AAGDC,UAAAA,IAAI,EAAE,SAHL;AAIDC,UAAAA,KAAK,EAAE,IAJN;AAKDC,UAAAA,MAAM,EAAE;AALP,SAAD,CAAJ;AAOA3B,QAAAA,cAAc,CAAC;AACXC,UAAAA,KAAK,EAAE,EADI;AAEXC,UAAAA,QAAQ,EAAE,EAFC;AAGXC,UAAAA,UAAU,EAAE;AAHD,SAAD,CAAd;AAKAL,QAAAA,QAAQ,CAAC,WAAD,CAAR;AACC,OAjBL,MAkBS,IAAIiB,GAAG,CAACJ,IAAJ,CAASK,MAAT,KAAoB,GAAxB,EACL;AACIhB,QAAAA,cAAc,CAAC,EAAE,GAAGD,WAAL;AAAkBI,UAAAA,UAAU,EAAEY,GAAG,CAACJ,IAAJ,CAASiB;AAAvC,SAAD,CAAd;AACH,OAHI,MAIA,IAAIb,GAAG,CAACJ,IAAJ,CAASK,MAAT,KAAoB,GAAxB,EACL;AACKpB,QAAAA,IAAI,CAAC,qBAAD,EAAuB,iCAAvB,EAAyD,OAAzD,CAAJ;AACJ;AACR,KAhCD;AAiCH,GAxCE;;AA0CD,MAAG,CAACuB,YAAY,CAACU,OAAb,CAAqB,OAArB,CAAJ,EACA,CAEC;AAEN;;GA9DQhC,K;UAEYH,W;;;KAFZG,K;AAgEL,eAAeA,KAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useNavigate} from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport swal from 'sweetalert';\r\n\r\nfunction Login() {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const [credentials, setCredentials] = useState({\r\n        email: \"\",\r\n        password: \"\",\r\n        error_list: [],\r\n    });\r\n\r\n    const handleInput = (e) => {\r\n        const { name, value } = e.target;\r\n        setCredentials({ ...credentials, [name]: value });\r\n    }\r\n\r\n       const authenticate = (e) => {\r\n        e.preventDefault();\r\n        const data = {\r\n            email: credentials.email,\r\n            password: credentials.password,\r\n        }\r\n\r\n        axios.post(`http://127.0.0.1:8000/api/login`, data , {\r\n              headers: {\r\n                'Accept':'application/json',\r\n                'credentials' : 'include'\r\n                 }\r\n        }).then(res=>{\r\n            if (res.data.status === 200) {\r\n                const Auth_token=res.data.message;\r\n                localStorage.setItem('token',Auth_token);\r\n                console.log(res.data.message);\r\n                swal({\r\n                    title: \"Success!\",\r\n                    text: \"Logged In Successfully\",\r\n                    icon: \"success\",\r\n                    timer: 2000,\r\n                    button: false\r\n                })\r\n                setCredentials({\r\n                    email: '',\r\n                    password: '',\r\n                    error_list: [],\r\n                });\r\n                navigate('/students');\r\n                }\r\n                else if (res.data.status === 422)\r\n                {\r\n                    setCredentials({ ...credentials, error_list: res.data.validate_err });\r\n                }\r\n                else if (res.data.status === 401)\r\n                {\r\n                     swal(\"Invalid Credentials\",\"Email and Password do not Match\",\"error\");\r\n                }\r\n        });\r\n    }\r\n\r\n      if(!localStorage.getItem('token'))\r\n      {\r\n        \r\n      }\r\n\r\n}\r\n\r\n    export default Login;\r\n"]},"metadata":{},"sourceType":"module"}