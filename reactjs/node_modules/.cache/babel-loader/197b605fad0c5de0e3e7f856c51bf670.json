{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\Laravel - React - CRUD\\\\reactjs\\\\src\\\\PrivateRoute.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Route, Navigate } from 'react-router-dom';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrivateRoute = _ref => {\n  _s();\n\n  let {\n    component: Component,\n    ...rest\n  } = _ref;\n  useEffect(() => {\n    let token = localStorage.getItem('token');\n\n    if (token) {\n      let tokenExpiration = jwtDecode(token).exp;\n      let dateNow = new Date();\n\n      if (tokenExpiration < dateNow.getTime() / 1000) {\n        setIsAuthenticated(false);\n      } else {\n        setIsAuthenticated(true);\n      }\n    } else {\n      setIsAuthenticated(false);\n    } // eslint-disable-next-line\n\n  }, [auth]);\n\n  if (isAuthenticated === null) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: props => !isAuthenticated ? /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Component, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PrivateRoute, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["C:/xampp/htdocs/Laravel - React - CRUD/reactjs/src/PrivateRoute.js"],"names":["React","useEffect","useState","Route","Navigate","PrivateRoute","component","Component","rest","token","localStorage","getItem","tokenExpiration","jwtDecode","exp","dateNow","Date","getTime","setIsAuthenticated","auth","isAuthenticated","props"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA0C,OAA1C;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;;;;AAEA,MAAMC,YAAY,GAAG,QAAuC;AAAA;;AAAA,MAAtC;AAAEC,IAAAA,SAAS,EAAEC,SAAb;AAAwB,OAAGC;AAA3B,GAAsC;AAC1DP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;;AACI,QAAGF,KAAH,EAAS;AACL,UAAIG,eAAe,GAAGC,SAAS,CAACJ,KAAD,CAAT,CAAiBK,GAAvC;AACA,UAAIC,OAAO,GAAG,IAAIC,IAAJ,EAAd;;AAEA,UAAGJ,eAAe,GAAGG,OAAO,CAACE,OAAR,KAAkB,IAAvC,EAA4C;AACxCC,QAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACH,OAFD,MAEK;AACDA,QAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;AACJ,KATD,MASO;AACJA,MAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACF,KAbS,CAcd;;AACD,GAfQ,EAeN,CAACC,IAAD,CAfM,CAAT;;AAiBA,MAAGC,eAAe,KAAK,IAAvB,EAA4B;AAC1B,wBAAO,qCAAP;AACD;;AAED,sBACE,QAAC,KAAD,OAAWZ,IAAX;AAAiB,IAAA,MAAM,EAAEa,KAAK,IAC5B,CAACD,eAAD,gBACE,QAAC,QAAD;AAAU,MAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,YADF,gBAGE,QAAC,SAAD,OAAeC;AAAf;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAhCD;;GAAMhB,Y;;KAAAA,Y;AAkCN,eAAeA,YAAf","sourcesContent":["import React, { useEffect, useState} from 'react';\r\nimport { Route, Navigate } from 'react-router-dom'\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n  useEffect(() => {\r\n    let token = localStorage.getItem('token')\r\n        if(token){\r\n            let tokenExpiration = jwtDecode(token).exp;\r\n            let dateNow = new Date();\r\n\r\n            if(tokenExpiration < dateNow.getTime()/1000){\r\n                setIsAuthenticated(false)\r\n            }else{\r\n                setIsAuthenticated(true)\r\n            }\r\n        } else {\r\n           setIsAuthenticated(false)\r\n        }\r\n    // eslint-disable-next-line\r\n  }, [auth])\r\n\r\n  if(isAuthenticated === null){\r\n    return <></>\r\n  }\r\n\r\n  return (\r\n    <Route {...rest} render={props =>\r\n      !isAuthenticated ? (\r\n        <Navigate to='/login'/>\r\n      ) : (\r\n        <Component {...props} />\r\n      )\r\n    }\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;"]},"metadata":{},"sourceType":"module"}